<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="Test_Broadcast_FillAndCoalesce" Id="{f4f3350a-4d73-419a-832e-8e439fdc313a}" SpecialFunc="None">
    <Declaration><![CDATA[// ASSUME Param.RECEIVER_CAP = 20
// Fills _Ec.comp table with first batch of signals
// Then fills _Broadcast.entry table with second batch of signals.
// Signal 1 entries need to be moved to the end, _Broadcast.iFirst is now Signal 2.
// Signal 2 entries expand towards the position 1.
// Signal 3 entries need to be moved to the end.

// Fill _Broadcast.entry with 3rd batch of signals forcing table to coalesce

// At the end the entity range should be number of compoennets plus header.
FUNCTION_BLOCK Test_Broadcast_FillAndCoalesce IMPLEMENTS I_Execute
VAR_INPUT
	bTest		: BOOL := TRUE;
END_VAR
VAR_OUTPUT
(*
	Resulting _Broadcast.entry table:
	1. Signal[1] - Header
	2. batch01[1, 1]
	3. batch01[1, 2]
	4. batch02[1, 1]
	5. batch02[1, 2]
	6. Signal[2] - Header
	7. batch02[2, 2]
	8. batch02[2, 1]
	9. batch01[2, 1]
	10. batch01[2, 2]
	11. Signal[3] - Header
	12. batch01[3, 1]
	13. batch02[3, 2]
	14. batch02[3, 1]
	15. batch01[3, 2]
	16. CoalSignal - Header
	17. coalBatch[1]
	18. coalBatch[2]
	19. coalBatch[3]
	20. EMPTY
*)
END_VAR
VAR
	exe					: Execute(THIS^);	
	call				: TestCall;

	ett					: EntityStart;
		signal				: ARRAY[1..3] OF Signal; // 3 headers
		dfgSignal			: Signal;
		
		batch01				: ARRAY[1..3, 1..2] OF Receiver(call); // 6 entries
		batch02				: ARRAY[1..3, 1..2] OF Receiver(call);	// another 6 entries
		dfgBatch			: ARRAY[1..4] OF Receiver(call);
	end					: EntityEnd;
	i, j				: UDINT;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="Execute" Id="{7edb6c7b-4f9b-489d-8ea9-a632711c37f7}">
      <Declaration><![CDATA[METHOD Execute
VAR_INPUT
	nPhase: INT := 0;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF bTest THEN
	FOR i := 1 TO 3 DO
		FOR j := 1 TO 2 DO
			signal[i].Pair(batch01[i, j]);
		END_FOR
	END_FOR

	FOR i := 1 TO 3 DO
		FOR j := 1 TO 2 DO
			signal[i].Pair(batch02[i, j]);
		END_FOR
	END_FOR
	
	FOR i := 1 TO 4 DO
		dfgSignal.Pair(dfgBatch[i]);
	END_FOR

	bTest := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>